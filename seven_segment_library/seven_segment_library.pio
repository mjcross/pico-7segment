.program seven_segment

;; SIDE pins:   digit common cathodes (pull low to select)
;; OUT pins:    multiplexed segments (shared between digits)

.side_set 4                             ; common cathode pins (4 digit display)

.wrap_target
    pull noblock    side 0b0111         ; TX FIFO (or X) -> OSR     keep showing 1000's for 1 tick                                        ; note: nonblocking pull on empty FIFO performs `mov osr, x`
                                        ; if the FIFO is empty this has the effect of `mov osr, x`
public entry_point:
    mov x, OSR      side 0b1111         ; save the segment pattern  and show no digits for 1 tick
                                        
    out pins, 8     side 0b1110  [1]    ; OSR[00..07] -> segments   and show 1's digit for 2 ticks
    out pins, 8     side 0b1101  [1]    ; OSR[08..15] -> segments   and show 10's digit for 2 ticks
    out pins, 8     side 0b1011  [1]    ; OSR[16..23] -> segments   and show 100's digit for 2 ticks
    out pins, 8     side 0b0111         ; OSR[24..31] -> segments   and show 1000's digit for 1 tick
.wrap
;; 6 instructions


% c-sdk {
static inline void seven_segment_sm_init (PIO pio, uint sm, uint offset, 
                                          uint segment_pinbase, uint digit_pinbase) {
    // create new sm config
    pio_sm_config config = seven_segment_program_get_default_config (offset);

    // configure the common cathodes and segment pin groups
    sm_config_set_out_pins (&config, segment_pinbase, 8);
    sm_config_set_sideset_pins (&config, digit_pinbase);

    // configure the clock divider
    float div = clock_get_hz (clk_sys) * 10e-3;
    sm_config_set_clkdiv (&config, div);

    // apply the configuration to the state machine initialise the program counter
    pio_sm_init (pio, sm, offset + seven_segment_offset_entry_point, &config);

    // enable the state machine
    pio_sm_set_enabled (pio, sm, true);
}
%}
